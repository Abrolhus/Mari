#include <pthread.h>
#include <signal.h>
#include <setjmp.h>
#include <sys/time.h>
#include <string>
#include "Module.h"
#include "Utils/SimpleTimer.h"
#include "Utils/Math.h"
#include "utils/ConcurrentMap.hpp"

extern ConcurrentMap<pthread_t, jmp_buf*> jumpPoints;
extern bool system_running;
extern void overtimeAlert(int);

Module::Module(SpellBook *spellBook, int ms)
{   
    highPriority = false;
    watchDog = false;
    this->ms = ms;
    this->spellBook = spellBook;
}

Module::~Module()
{
}

bool Module::IsHighPriority()
{
    return highPriority;
}

bool Module::HasWatchDog()
{
    return watchDog;
}

void Module::SetTime(int ms)
{
    this->ms = ms;
}

int Module::GetTime()
{
    return ms;
}

void Module::Tick(float ellapsedTime)
{
    
}

void Module::OnStop()
{

}

void Module::OnStart()
{

}

void Module::Start()
{
    OnStart();
    int rc;
    if(!highPriority)
    {
        rc = pthread_create(&thread, NULL, Module::Run, (void *)this); //rc = returned code
    }
    else
    {
        struct sched_param param;
        int policy;
        pthread_attr_t attr;
        pthread_attr_init(&attr);
        pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);
        pthread_attr_setschedpolicy(&attr, SCHED_FIFO);
        param.sched_priority = 65;
        pthread_attr_setschedparam(&attr, &param);
        pthread_create(&thread, &attr, Module::Run, (void *)this);
        pthread_attr_destroy(&attr);
        pthread_getschedparam(thread, &policy, &param);
    }
}

void Module::Stop()
{
    int rc;
    pthread_join(thread, NULL);
    OnStop();
}

void *Module::Run(void *arg)
{
    Module *module = (Module *)arg;
    pthread_t threadID = pthread_self();
    if (module->watchDog) 
    {
        signal(SIGALRM, overtimeAlert);
    }
    SimpleTimer timer, timerWait;
    float t;
    int ms = 0, wt = 0;
    while (system_running)
    {
        cout << "Id: " << threadID << endl;
        try 
        {
            // we don't care if this leaks
            // but it shouldn't reach this line again in this thread
            jumpPoints[threadID] =
            reinterpret_cast<jmp_buf*>(malloc(sizeof(jmp_buf)));
            if (!jumpPoints[threadID])
                cout << "malloc failed for name\n";

            cout << "Thread 'name' started\n";
            if (!setjmp(*jumpPoints[threadID])) 
            {
                while(system_running)
                {
                    cout << "Id 2: " << threadID << endl;
                    // set watchdog timer to alert us about stuck threads
                    if (module->watchDog) 
                    {
                        struct itimerval itval5;
                        itval5.it_value.tv_sec = 5;
                        itval5.it_value.tv_usec = 0;
                        itval5.it_interval.tv_sec = 0;
                        itval5.it_interval.tv_usec = 0;
                        setitimer(ITIMER_REAL, &itval5, NULL);
                    }

                    t = timer.Seconds();
                    if(t < 0.0f)
                        t = -t;

                    timerWait.Restart();

                    module->Tick(t);
                    timer.Restart();

                    ms = timerWait.Millis();
                    
                    // unset watchdog timer to alert us about stuck threads
                    if (module->watchDog) 
                    {
                        struct itimerval itval0;
                        itval0.it_value.tv_sec = 0;
                        itval0.it_value.tv_usec = 0;
                        itval0.it_interval.tv_sec = 0;
                        itval0.it_interval.tv_usec = 0;
                        setitimer(ITIMER_REAL, &itval0, NULL);
                    }

                    if(module->ms > 0)
                    {
                        wt = module->ms - ms;
                        if(wt > 0)
                            usleep(wt*1000);
                    }
                }
            }
            cout << "Thread 'name' disabled." << std::endl;
        }
        catch(const std::exception & e) 
        {
            // TODO: Replace these with runit or supervisord
            cout << "exception caught" << endl;
            free(jumpPoints[threadID]);
            usleep(500000);
            cout << "exception derivative was caught with error msg: " << e.what() << std::endl;
            cout << "in name" << " with id " << threadID << std::endl;
        } 
        catch(...) 
        {
            cout << "exception caught" << endl;
            free(jumpPoints[threadID]);
            usleep(500000);
            cout << "Something was thrown from name with id " << threadID << std::endl;
        }
    }
    pthread_exit(NULL);
}